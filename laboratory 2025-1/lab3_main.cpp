/*
I.	Определить баз  овый класс с именем Tимя класса и с полями данных, определенными в варианте задания и методами:
•	установить значение поля данных;
•	вернуть  значение поля данных;
•	конструктор, который инициализирует поля класса пустыми значениями;
•	конструктор, с параметрами, который инициализирует поля класса переданными  значениями;
•	деструктор, сообщающий об удалении объекта;
Примечание. Указанные методы реализовать в классе.
•	дополнительные операции над объектами класса, указанные в варианте.
II.	Обеспечить видимость методов класса (интерфейса)  в приложениях. Доступ к полям данных класса разрешить наследникам.
III.	Разработать основную программу, в которой:
•	создать два объекта, используя конструктор по молчанию;
•	заполнить поля объектов данными, используя соответствующие методы;
•	создать третий объект конструктором с параметрами;
•	вывести данные третьего объекта на монитор;
•	выполнить дополнительные операции и представить результат.
IV.	Создать класс наследник в отдельном заголовочном файле;
V.	Поля класса определены в варианте. Ограничение доступа – private;
VI.	Методы доступны наследникам:
•	Заполнить новые поля;
•	Вернуть значения полей;
•	Конструктор;
•	Деструктор;
•	Дополнительные операции, определенные в варианте.
VII.	Реализовать метод валидации данных с помощью исключений;
VIII.	Отладить программу. Убедиться, что деструктор удалил все объекты;
X.	Усложнение: Усложнить программу, чтобы в ней реализовать динамический (виртуальные функции) и параметрический полиморфизм (шаблоны функций и класса).

ОСНОВНОЙ КЛАСС:
Класс - Запись в Карточке пользователя библиотеки
Поля: Инвентарный номер, Автор, Название, Дата выдачи, Дата возврата
Дополнительные операции
1)	По инвентарному номеру вернуть название и дату возврата книги.
2)	Определить, один ли автор у двух книг.

НАСЛЕДНИК:
Класс – запись о книге вида
Поля: Вид книги – художественная, жанр (параметр); Вид книги – техническая, справочник или словарь (параметр).
Дополнительные операции
3)	По инвентарному номеру вернуть вид книги и ее второй параметр.
4)	Определить, две книги, взятые пользователем относятся к художественным книгам.


ДЛЯ ПРОВЕРКИ:
5
1 Война_и_мир Лев_Толстой 01-01-2023 31-12-2023
2 Мастер_и_Маргарита Михаил_Булгаков 15-02-2023 30-04-2023
3 Преступление_и_наказание Фёдор_Достоевский 20-03-2023 29-05-2023
4 Отверженные Виктор_Гюго 10-06-2023 25-08-2023
5 Над_пропастью_во_ржи Джером_Дэвид_Селинджер 01-09-2023 31-10-2023

5
1 Война_и_мир Лев_Толстой 01-01-2023 31-12-2023 Художественный Сказка
2 Мастер_и_Маргарита Михаил_Булгаков 15-02-2023 30-04-2023 Художественный Сказка
3 Преступление_и_наказание Фёдор_Достоевский 20-03-2023 29-05-2023 Техническая Справочник
4 Отверженные Виктор_Гюго 10-06-2023 25-08-2023 Техническая Словарь
5 Над_пропастью_во_ржи Джером_Дэвид_Селинджер 01-09-2023 31-10-2023 Техническая Справочник
*/
#include "lab3.h"

void validate_index(int id, int len) {
    if (id >= len || id < 0) {
        throw out_of_range("Индекс выходит за пределы массива");
    }
}

int main(){
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");
    int len_cards, len_book, id, menu_id=1, id_, id_2;
    bool res;
    string name_lib, name_author, date_of_issue, date_of_return, genre, parametr;

    cout << "Введите количество записей: ";
    cin >> len_cards;
    Library_Cards<int> *cards = new Library_Cards<int>[len_cards];
    for (int i = 0; i < len_cards; i++){
        cout << "Введите id: ";
        cin >> id;
        cout << "Введите название книги: ";
        cin >> name_lib;
        cout << "Введите автора книги: ";
        cin >> name_author;
        cout << "Введите дату выдачи: ";
        cin >> date_of_issue;
        cout << "Введите дату возврата: ";
        cin >> date_of_return;
        cards[i] = Library_Cards(id, name_lib, name_author, date_of_issue, date_of_return);
    }

    cout << endl << "Введите количество записей: ";
    cin >> len_book;
    Book<int> *cards_gen = new Book<int>[len_book];
    for (int i = 0; i < len_book; i++){
        cout << "Введите id: ";
        cin >> id;
        cout << "Введите название книги: ";
        cin >> name_lib;
        cout << "Введите автора книги: ";
        cin >> name_author;
        cout << "Введите дату выдачи: ";
        cin >> date_of_issue;
        cout << "Введите дату возврата: ";
        cin >> date_of_return;
        cout << "Введите дату жанр: ";
        cin >> genre;
        cout << "Введите параметр: ";
        cin >> parametr;
        cards_gen[i] = Book(id, name_lib, name_author, date_of_issue, date_of_return, genre, parametr);
    }

    while(menu_id != 0){
        cout << endl << "Выберите параметр: \n"
                "0 - Выход\n"
                "1 - По id вернуть название и дату возврата книги\n"
                "2 - Определить один ли автор у двух книг\n"
                "3 - По id вернуть жанр и параметр(наследник)\n"
                "4 - Определить художественный ли жанр у двух книг(наследник)\n"
                "5 - Виртуальный привет от базового\n"
                "6 - Виртуальный привет от наследниека\n"
                "Ввод: ";
        cin >> menu_id;
        try {
            switch (menu_id) {
                case 0:
                    break;
                case 1:
                    //По id вернуть название и дату возврата книги.
                    cout << "Введите id: ";
                    cin >> id_;
                    validate_index(id_, len_cards);
                    for (int i = 0; i < len_cards; i++) {
                        cards[i].return_book(id_);
                    }
                    break;
                case 2:
                    //Определить один ли автор у двух книг
                    cout << "Введите id и id_2: ";
                    cin >> id_ >> id_2;
                    validate_index(id_, len_cards);
                    validate_index(id_2, len_cards);
                    res = cards[id_] == cards[id_2];
                    cout << "cards[" << id_ << "] == cards[" << id_2 << "] = " << res << endl << endl;
                    break;
                case 3:
                    //По id вернуть жанр и параметр.
                    cout << "Введите id: ";
                    cin >> id_;
                    validate_index(id_, len_book);
                    for (int i = 0; i < len_book; i++) {
                        cards_gen[i].return_book_gen(id_);
                    }
                    break;
                case 4:
                    //Определить художественный ли жанр у двух книг
                    cout << "Введите id и id_2: ";
                    cin >> id_ >> id_2;
                    validate_index(id_, len_book);
                    validate_index(id_2, len_book);
                    res = cards_gen[id_] == cards_gen[id_2];
                    cout << "cards_gen[" << id_ << "] == cards_gen[" << id_2 << "] = " << res << endl << endl;
                    break;
                case 5:
                    cards->hello();
                    break;
                case 6:
                    cards_gen->hello();
                    break;
                default:
                    cout << "Такой команды нет" << endl;
            }
        }
        catch(const out_of_range& e) {
            cerr << endl << "Ошибка: " << e.what() << endl;
        }
    }

    delete[] cards;
    delete[] cards_gen;

    return 0;
}